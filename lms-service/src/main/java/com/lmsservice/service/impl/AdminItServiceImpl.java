package com.lmsservice.service.impl;

import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.lmsservice.controller.NotificationSocketController;
import com.lmsservice.dto.request.CreateUserRequest;
import com.lmsservice.dto.request.SendNotificationRequest;
import com.lmsservice.dto.response.NotificationResponse;
import com.lmsservice.dto.response.UserResponse;
import com.lmsservice.entity.*;
import com.lmsservice.exception.AppException;
import com.lmsservice.exception.ErrorCode;
import com.lmsservice.repository.*;
import com.lmsservice.service.AdminItService;
import com.lmsservice.service.MailService;

import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;

@Service
@RequiredArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
public class AdminItServiceImpl implements AdminItService {

    UserRepository userRepo;
    RoleRepository roleRepo;
    PermissionRepository permRepo;
    PasswordEncoder encoder;
    MailService mailService;
    NotificationRepository notificationRepo;
    NotificationTypeRepository notificationTypeRepo;
    NotificationSocketController socketController;

    /**
     * ------------------- USER -------------------
     **/
    @Override
    public List<User> getUsers(String role, String keyword) {
        if (keyword != null && !keyword.isBlank()) {
            return userRepo.searchUsers(keyword);
        } else if (role != null && !role.isBlank()) {
            return userRepo.findByRole_NameIgnoreCase(role);
        } else {
            return userRepo.findAll();
        }
    }

    @Override
    public UserResponse createUser(CreateUserRequest req) {
        if (userRepo.existsByUserName(req.getUserName())) throw new AppException(ErrorCode.DUPLICATE_USER);

        String tempPassword = generateRandomPassword(8);
        Role role = roleRepo.findById(req.getRoleId()).orElseThrow(() -> new AppException(ErrorCode.ROLE_NOT_FOUND));

        User u = new User();
        u.setUserName(req.getUserName());
        u.setEmail(req.getEmail());
        u.setFirstName(req.getFirstName());
        u.setLastName(req.getLastName());
        u.setPassword(encoder.encode(tempPassword));
        u.setRole(role);
        u.setIsActive(true);

        User saved = userRepo.save(u);
        sendAccountProvisionMail(saved, tempPassword);
        return UserResponse.builder()
                .id(saved.getId())
                .userName(saved.getUserName())
                .email(saved.getEmail())
                .firstName(saved.getFirstName())
                .lastName(saved.getLastName())
                .roleName(saved.getRole().getName())
                .build();
    }

    @Override
    public void sendAccountProvisionMail(User user, String tempPassword) {
        String html =
                """
							<div style="font-family: Arial, sans-serif; color: #333; line-height: 1.6;">
								<h3 style="color:#2c3e50;">Xin ch√†o %s,</h3>
								<p>
									Ch√∫ng t√¥i r·∫•t vui ƒë∆∞·ª£c th√¥ng b√°o r·∫±ng t√†i kho·∫£n c·ªßa b·∫°n tr√™n h·ªá th·ªëng
									<strong>LMS Center</strong> ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng.
								</p>

								<p>Th√¥ng tin ƒëƒÉng nh·∫≠p c·ªßa b·∫°n nh∆∞ sau:</p>
								<ul style="list-style-type:none; padding:0;">
									<li><strong>T√™n ƒëƒÉng nh·∫≠p:</strong> %s</li>
									<li><strong>M·∫≠t kh·∫©u t·∫°m th·ªùi:</strong> %s</li>
								</ul>

								<p>
									Vui l√≤ng truy c·∫≠p v√†o
									<a href="http://localhost:5173/login"
									style="color:#335CFF; text-decoration:none; font-weight:bold;">
										LMS Center
									</a>
									ƒë·ªÉ ƒëƒÉng nh·∫≠p v√† ƒë·ªïi m·∫≠t kh·∫©u nh·∫±m ƒë·∫£m b·∫£o b·∫£o m·∫≠t th√¥ng tin c√° nh√¢n.
								</p>

								<p>
									N·∫øu b·∫°n g·∫∑p b·∫•t k·ª≥ kh√≥ khƒÉn n√†o trong qu√° tr√¨nh ƒëƒÉng nh·∫≠p,
									vui l√≤ng li√™n h·ªá v·ªõi b·ªô ph·∫≠n h·ªó tr·ª£ k·ªπ thu·∫≠t c·ªßa trung t√¢m ƒë·ªÉ ƒë∆∞·ª£c tr·ª£ gi√∫p k·ªãp th·ªùi.
								</p>

								<br/>
								<p>Tr√¢n tr·ªçng,<br/>
								<strong>Ph√≤ng Qu·∫£n tr·ªã H·ªá th·ªëng ‚Äì LMS Center</strong>
								</p>

								<hr style="border:none; border-top:1px solid #eee; margin-top:20px;"/>
								<p style="font-size:12px; color:#888;">
									ƒê√¢y l√† email t·ª± ƒë·ªông, vui l√≤ng kh√¥ng ph·∫£n h·ªìi tr·ª±c ti·∫øp.
									N·∫øu c·∫ßn h·ªó tr·ª£, vui l√≤ng li√™n h·ªá qua k√™nh h·ªó tr·ª£ ch√≠nh th·ª©c c·ªßa trung t√¢m.
								</p>
							</div>
						"""
                        .formatted(user.getFirstName() + " " + user.getLastName(), user.getUserName(), tempPassword);

        mailService.sendMail(user.getEmail(), "[LMS Center] C·∫•p t√†i kho·∫£n m·ªõi", html);
    }

    @Override
    public String generateRandomPassword(int len) {
        return java.util.UUID.randomUUID().toString().replace("-", "").substring(0, len);
    }

    @Override
    public void deleteUser(Long id) {
        if (!userRepo.existsById(id)) throw new AppException(ErrorCode.USER_NOT_FOUND);

        userRepo.deleteById(id);
    }

    @Override
    public User updateUserRole(Long userId, Long roleId) {
        User u = userRepo.findById(userId).orElseThrow(() -> new AppException(ErrorCode.USER_NOT_FOUND));
        Role r = roleRepo.findById(roleId).orElseThrow(() -> new AppException(ErrorCode.UNAUTHORIZED_ACCESS_ROLE));
        u.setRole(r);
        return userRepo.save(u);
    }

    /**
     * ------------------- ROLE -------------------
     **/
    @Override
    public List<Role> getAllRoles() {
        return roleRepo.findAll();
    }

    @Override
    public Role createRole(Role r) {
        if (roleRepo.existsByName(r.getName())) throw new AppException(ErrorCode.DUPLICATE_PROGRAM_TITLE);
        return roleRepo.save(r);
    }

    @Override
    public void deleteRole(Long id) {
        if (!roleRepo.existsById(id)) throw new AppException(ErrorCode.UNAUTHORIZED_ACCESS_ROLE);
        roleRepo.deleteById(id);
    }

    /**
     * ------------------- PERMISSION -------------------
     **/
    @Override
    public List<Permission> getAllPermissions() {
        return permRepo.findAll();
    }

    @Override
    public Permission createPermission(Permission p) {
        if (permRepo.existsByName(p.getName())) throw new AppException(ErrorCode.INVALID_REQUEST);
        p.setActive(true);
        return permRepo.save(p);
    }

    @Override
    public void deletePermission(Long id) {
        if (!permRepo.existsById(id)) throw new AppException(ErrorCode.INVALID_REQUEST);
        permRepo.deleteById(id);
    }

    /**
     * ------------------- ASSIGN -------------------
     **/
    @Override
    public Role assignPermissions(Long roleId, List<Long> permIds) {
        Role role = roleRepo.findById(roleId).orElseThrow(() -> new AppException(ErrorCode.UNAUTHORIZED_ACCESS_ROLE));

        Set<Permission> perms = new HashSet<>(permRepo.findAllById(permIds));

        if (perms.isEmpty()) throw new AppException(ErrorCode.INVALID_REQUEST);

        role.setPermissions(perms);
        return roleRepo.save(role);
    }

    /**
     * ------------------- NOTIFICATION -------------------
     **/
    @Override
    public void sendNotification(SendNotificationRequest req) {
        NotificationType type = notificationTypeRepo
                .findById(req.getNotificationTypeId())
                .orElseThrow(() -> new AppException(ErrorCode.NOTIFICATION_TYPE_NOT_FOUND));

        Set<User> receivers = new HashSet<>();

        // To√†n h·ªá th·ªëng
        if (Boolean.TRUE.equals(req.getBroadcast())) {
            receivers.addAll(userRepo.findAll());
        }

        // Theo role
        if (req.getTargetRoles() != null && !req.getTargetRoles().isEmpty()) {
            List<Role> roles = roleRepo.findAllByNameIn(req.getTargetRoles());
            receivers.addAll(userRepo.findByRoleIn(roles));
        }

        // Theo user c·ª• th·ªÉ
        if (req.getTargetUserIds() != null && !req.getTargetUserIds().isEmpty()) {
            receivers.addAll(userRepo.findAllById(req.getTargetUserIds()));
        }

        // Theo l·ªõp h·ªçc
        if (req.getTargetCourseIds() != null && !req.getTargetCourseIds().isEmpty()) {
            receivers.addAll(userRepo.findStudentsByCourseIds(req.getTargetCourseIds()));
        }

        // Theo ch∆∞∆°ng tr√¨nh
        if (req.getTargetProgramIds() != null && !req.getTargetProgramIds().isEmpty()) {
            receivers.addAll(userRepo.findStudentsByProgramIds(req.getTargetProgramIds()));
        }

        if (receivers.isEmpty()) {
            throw new AppException(ErrorCode.NO_RECEIVER_FOUND);
        }

        // N·∫øu c√≥ scheduledDate trong t∆∞∆°ng lai ‚Üí ch·ªâ l∆∞u, ch∆∞a g·ª≠i
        if (req.getScheduledDate() != null && req.getScheduledDate().isAfter(LocalDateTime.now())) {
            List<Notification> drafts = receivers.stream()
                    .map(u -> Notification.builder()
                            .content("<b>" + req.getTitle() + "</b><br/>" + req.getContent())
                            .severity((short) req.getSeverity())
                            .url(req.getUrl())
                            .notificationType(type)
                            .user(u)
                            .isSeen(false)
                            .scheduledDate(req.getScheduledDate())
                            .postedDate(null)
                            .build())
                    .toList();

            notificationRepo.saveAll(drafts);
            System.out.printf(
                    "üïì ƒê√£ l√™n l·ªãch g·ª≠i [%s] cho %d ng∆∞·ªùi l√∫c %s%n",
                    req.getTitle(), receivers.size(), req.getScheduledDate());
            return; // D·ª´ng ·ªü ƒë√¢y, kh√¥ng g·ª≠i realtime ngay
        }

        // G·ª≠i ngay (n·∫øu kh√¥ng c√≥ scheduledDate)
        List<Notification> notis = receivers.stream()
                .map(u -> Notification.builder()
                        .content("<b>" + req.getTitle() + "</b><br/>" + req.getContent())
                        .severity((short) req.getSeverity())
                        .url(req.getUrl())
                        .notificationType(type)
                        .user(u)
                        .isSeen(false)
                        .postedDate(LocalDateTime.now())
                        .build())
                .toList();

        notificationRepo.saveAll(notis);

        notis.forEach(noti -> socketController.sendToUser(
                noti.getUser().getId(),
                NotificationResponse.builder()
                        .id(noti.getId())
                        .title(req.getTitle())
                        .content(req.getContent())
                        .severity(req.getSeverity())
                        .isSeen(false)
                        .url(req.getUrl())
                        .type(type.getTitle())
                        .postedDate(noti.getPostedDate())
                        .build()));
    }

    @Override
    public List<NotificationResponse> getScheduledNotifications() {
        List<Notification> list = notificationRepo.findScheduledNotifications();

        return list.stream()
                .map(n -> NotificationResponse.builder()
                        .id(n.getId())
                        .title(extractTitle(n.getContent()))
                        .content(n.getContent())
                        .severity(n.getSeverity())
                        .isSeen(n.isSeen())
                        .url(n.getUrl())
                        .type(n.getNotificationType().getTitle())
                        .postedDate(n.getScheduledDate())
                        .build())
                .toList();
    }

    private String extractTitle(String html) {
        if (html == null) return "(Th√¥ng b√°o)";
        if (html.contains("<b>") && html.contains("</b>")) {
            int start = html.indexOf("<b>") + 3;
            int end = html.indexOf("</b>");
            return html.substring(start, end);
        }
        return "(Th√¥ng b√°o)";
    }
}
